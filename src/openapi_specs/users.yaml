openapi: 3.0.3
info:
  title: EduCircle User API
  version: 1.0.0
  description: API for managing users in the EduCircle platform

servers:
  - url: http://localhost:3000/api

paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

    get:
      summary: Get all users with optional filters
      parameters:
        - in: query
          name: role
          schema:
            $ref: "#/components/schemas/Role"
        - in: query
          name: state
          schema:
            $ref: "#/components/schemas/State"
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"

  /users/mentors:
    get:
      summary: Get all mentors
      responses:
        "200":
          description: List of mentors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"

  /users/mentees:
    get:
      summary: Get all mentees
      responses:
        "200":
          description: List of mentees
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"

  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found

    put:
      summary: Update a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

  /users/{id}/deactivate:
    patch:
      summary: Deactivate a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User deactivated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

  /users/{id}/activate:
    patch:
      summary: Activate a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

  /users/{id}/suspend:
    patch:
      summary: Suspend a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User suspended
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

components:
  schemas:
    Role:
      type: string
      enum: [MENTEE, MENTOR, ADMIN]

    State:
      type: string
      enum: [ACTIVE, INACTIVE, SUSPENDED]

    CreateUser:
      type: object
      required:
        - firstName
        - lastName
        - email
        - role
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        location:
          type: string
        role:
          $ref: "#/components/schemas/Role"
        initials:
          type: string

    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        location:
          type: string
        initials:
          type: string
        state:
          $ref: "#/components/schemas/State"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        location:
          type: string
        role:
          $ref: "#/components/schemas/Role"
        state:
          $ref: "#/components/schemas/State"
        initials:
          type: string

    UserResponse:
      type: object
      properties:
        status:
          type: string
        data:
          $ref: "#/components/schemas/User"

    UserListResponse:
      type: object
      properties:
        status:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        meta:
          type: object
          properties:
            total:
              type: integer
            limit:
              type: integer
            offset:
              type: integer
